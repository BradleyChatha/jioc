before_script:
  - apt-get update
  - if [ "$BUILD_ARCH" = "32" ]; then apt-get install -y gcc-multilib libc6-dev-i386 --no-install-recommends --allow-unauthenticated; fi
  - if [ "$BUILD_ARCH" = "64" ]; then apt-get install -y gcc libc6-dev --no-install-recommends --allow-unauthenticated; fi
  - if [ "$BUILD_ARCH" = "" ]; then echo "NO BUILD_ARCH ENVIRONMENT VARIABLE"; fi
  - if [ ! -d "./dlang/dmd-2.087.1/" ]; then curl https://dlang.org/install.sh | bash -s dmd-2.087.1 -p $CI_PROJECT_DIR/dlang/; fi
  - source ./dlang/dmd-2.087.1/activate
  - dmd --version
  - dub --version

cache:
  key: DMD_LATEST
  paths:
    - ./dlang/

stages:
  - Build Debug
  - Test
  - Build Release

# Make sure the main build types (release, debug, and unittest) work for both architectures.
# I've had issues in the past where some of my code won't compile in both (mostly forgetting to use size_t somewhere) which is why both are tested.
Build Debug x86:
  stage: Build Debug
  script:
      - dub build --build=debug --arch=x86
  variables:
      BUILD_ARCH: "32"

Build Debug x64:
  stage: Build Debug
  script:
      - dub build --build=debug --arch=x86_64
  variables:
      BUILD_ARCH: "64"

Build Release x86:
  stage: Build Release
  script:
      - dub build --build=release --arch=x86
  variables:
      BUILD_ARCH: "32"

Build Release x64:
  stage: Build Release
  script:
      - dub build --build=release --arch=x86_64
  variables:
      BUILD_ARCH: "64"

Test:
  stage: Test
  script:
      - dub test
  variables:
      BUILD_ARCH: "64"
